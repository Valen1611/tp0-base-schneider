@@ -2,6 +2,7 @@ package common
 
 import (
 	"fmt"
+	"strings"
 )
 

+func ParseWinnersMessage(message string) []string {
+
+	isWinnerMessage := strings.HasPrefix(message, "WINNERS")
+
+	if !isWinnerMessage {
+		return nil
+	}
+
+	winners := []string{}
+	messageData := strings.Split(message, ":")[1]
+	
+	if messageData == "" {
+		return []string{} 
+	}
+	
+	for _, winner := range strings.Split(messageData, ",") {
+		winners = append(winners, strings.TrimSpace(winner))
+	}
+
+	return winners
 }
\ No newline at end of file
diff --git a/client/common/client.go b/client/common/client.go
index 4ea00d3..6b32ab1 100644
--- a/client/common/client.go
+++ b/client/common/client.go
@@ -12,6 +12,7 @@ import (
 	"os/signal"
 	"syscall"
 	"encoding/csv"
+
 )
 
 var log = logging.MustGetLogger("log")
@@ -221,6 +222,23 @@ func (c *Client) SendBatchBets() bool {
 
 	SocketWriter(c.conn, "FINISH:")
 
+	// Espero ganador
+	log.Infof("action: esperando_ganadores | result: success | client_id: %v", c.config.ID)
+	response, error := SocketReader(c.conn)
+	if error != nil {
+		log.Criticalf(
+			"action: read_bets | result: fail | client_id: %v | error: %v",
+			c.config.ID,
+			error,
+		)
+		return false
+	}
+
+	// Consulto ganadores
+	ganadores := ParseWinnersMessage(response)
+	cant_ganadores := len(ganadores)
+	log.Infof("action: consulta_ganadores | result: success | cant_ganadores: %v", cant_ganadores)
+	// time.Sleep(100 * time.Millisecond)
 	return true
 }
 
diff --git a/client/config.yaml b/client/config.yaml
index 2f213d6..5928147 100644
--- a/client/config.yaml
+++ b/client/config.yaml
@@ -1,9 +1,9 @@
 server:
   address: "server:12345"
 loop:
-  amount: 3
-  period: "50ms"
+  amount: 500
+  period: "150ms"
 log:
   level: "INFO"
 batch:
-  maxAmount: 99
+  maxAmount: 10
diff --git a/client/main.go b/client/main.go
index f3e049c..45bc54b 100644
--- a/client/main.go
+++ b/client/main.go
@@ -118,6 +118,8 @@ func main() {
 		log.Critical("SendBatchBets failed")
 		return
 	}
+	sleep_time := time.Duration(3) * time.Second
+	time.Sleep(sleep_time)
 	log.Info("SendBatchBets success")
 	// client.StartClientLoop()
 }
diff --git a/docker-compose-dev.yaml b/docker-compose-dev.yaml
index bb76fc0..28a5fa7 100644
--- a/docker-compose-dev.yaml
+++ b/docker-compose-dev.yaml
@@ -6,8 +6,7 @@ services:
     entrypoint: python3 /main.py
     environment:
       - PYTHONUNBUFFERED=1
-      - HANDSHAKE_REQUEST_MESSAGE=HELLO_SERVER
-      - HANDSHAKE_RESPONSE_MESSAGE=HELLO_CLIENT
+      - CLIENTS_AMOUNT=5
     networks:
       - testing_net
     volumes:
@@ -27,6 +26,62 @@ services:
       - ./client/config.yaml:/config.yaml
       - .data/agency-1.csv:/.data/agency-1.csv
 
+  client2:
+    container_name: client2
+    image: client:latest
+    entrypoint: /client
+    environment:
+      - CLI_ID=2
+    networks:
+      - testing_net
+    depends_on:
+      - server
+    volumes:
+      - ./client/config.yaml:/config.yaml
+      - .data/agency-2.csv:/.data/agency-2.csv
+
+  client3:
+    container_name: client3
+    image: client:latest
+    entrypoint: /client
+    environment:
+      - CLI_ID=3
+    networks:
+      - testing_net
+    depends_on:
+      - server
+    volumes:
+      - ./client/config.yaml:/config.yaml
+      - .data/agency-3.csv:/.data/agency-3.csv
+
+  client4:
+    container_name: client4
+    image: client:latest
+    entrypoint: /client
+    environment:
+      - CLI_ID=4
+    networks:
+      - testing_net
+    depends_on:
+      - server
+    volumes:
+      - ./client/config.yaml:/config.yaml
+      - .data/agency-4.csv:/.data/agency-4.csv
+
+  client5:
+    container_name: client5
+    image: client:latest
+    entrypoint: /client
+    environment:
+      - CLI_ID=5
+    networks:
+      - testing_net
+    depends_on:
+      - server
+    volumes:
+      - ./client/config.yaml:/config.yaml
+      - .data/agency-5.csv:/.data/agency-5.csv
+
 networks:
   testing_net:
     ipam:
diff --git a/ej1/generar-compose.py b/ej1/generar-compose.py
index eb486b1..15cfbb0 100644
--- a/ej1/generar-compose.py
+++ b/ej1/generar-compose.py
@@ -9,13 +9,14 @@ RUTA_NETWORK = "ej1/network.yaml"
 SERVER_NAME = "server"
 CLIENT_NAME = "client"
 
-def get_file_content():
+def get_file_content(cant_clientes):
     with open(RUTA_HEADER, "r") as archivo:
         header = archivo.read()
 
     with open(RUTA_SERVER, "r") as archivo:
         server = archivo.read()
     server = server.replace("server", SERVER_NAME)
+    server = server.replace("CANT_CLIENTS", cant_clientes)
 
     with open(RUTA_CLIENT, "r") as archivo:
         client = archivo.read()
@@ -46,7 +47,7 @@ def main():
     cant_clientes = args[1]
 
     # Levanto los archivos que tienen la estructura del output
-    header, server, client, networks = get_file_content()
+    header, server, client, networks = get_file_content(cant_clientes)
 
     # Guardo el yaml el output
     generate_yaml(header, server, client, networks, ruta_archivo_salida, cant_clientes)
diff --git a/ej1/server.yaml b/ej1/server.yaml
index 7ccbf9c..f367a46 100644
--- a/ej1/server.yaml
+++ b/ej1/server.yaml
@@ -4,8 +4,7 @@
     entrypoint: python3 /main.py
     environment:
       - PYTHONUNBUFFERED=1
-      - HANDSHAKE_REQUEST_MESSAGE=HELLO_SERVER
-      - HANDSHAKE_RESPONSE_MESSAGE=HELLO_CLIENT
+      - CLIENTS_AMOUNT=CANT_CLIENTS
     networks:
       - testing_net
     volumes:
diff --git a/server/common/server.py b/server/common/server.py
index 89a56d1..e98b2c7 100644
--- a/server/common/server.py
+++ b/server/common/server.py
@@ -11,6 +11,7 @@ from common import utils
 from common import socket_wrapper
 from common import bet_protocol
 
+TOTAL_CLIENTS = os.getenv("CLIENTS_AMOUNT", 1)
 class Server:
     def __init__(self, port, listen_backlog):
         # Initialize server socket
@@ -19,8 +20,8 @@ class Server:
         self._server_socket.listen(listen_backlog)
 
         self.clients = {}
+        self.clients_ids = {}
         self.seguir_conectando = True
-
         signal.signal(signal.SIGTERM, self.signal_handler)
 
     def run(self):
@@ -34,14 +35,41 @@ class Server:
 
         # TODO: Modify this program to handle signal to graceful shutdown
         # the server
+        clients_waiting = 0
         while self.seguir_conectando:
+            if clients_waiting == int(TOTAL_CLIENTS):                
+                self.hacer_sorteo()
+                clients_waiting = 0
+            
             client_sock = self.__accept_new_connection()            
             self.clients[client_sock] = "TALKING"
             
             while self.clients[client_sock] == "TALKING":
                 self.__handle_client_connection(client_sock)
-            client_sock.close()
+
+            if self.clients[client_sock] == "WAITING":
+                clients_waiting += 1
+
             
+    def hacer_sorteo(self):
+        logging.info("action: sorteo | result: success")
+
+        bets = utils.load_bets()
+        winners = {agency : [] for agency in self.clients_ids.keys()}
+        for bet in bets:
+            if utils.has_won(bet):
+                logging.info(f"action: apuesta_ganadora | result: success | dni: {bet.document} | numero: {bet.number}")
+                winners[bet.agency].append(bet)
+        self.notify_winners(winners)
+
+    def notify_winners(self, winners):
+        for agency, bets in winners.items():
+            client_sock = self.clients_ids[agency]
+            winners_dnis = [str(bet.document) for bet in bets]
+            socket_wrapper.write_msg(client_sock, f"WINNERS:{','.join(winners_dnis)}")
+
+        # client_sock = self.clients_ids[bet.agency]
+        # socket_wrapper.write_msg(client_sock, f"WIN:{bet.number}")            
 
     def __handle_client_connection(self, client_sock):
         """
@@ -60,7 +88,7 @@ class Server:
             if action == "BET":
                 # Leo la data de la apuesta
                 agency, name, surname, document, birthdate, number = bet_protocol.read_bet_msg(msg)                
-                bet = Bet(agency=agency, first_name=name, last_name=surname, document=document, birthdate=birthdate, number=number)
+                bet = Bet(agency=agency, first_name=name, last_name=surname, document=document, birthdate=birthdate, number=number)            
                 # Guardo la apuesta
                 utils.store_bets([bet])            
                 logging.info(f'action: apuesta_almacenada | result: success | dni: {document} | numero: {number}.')
@@ -84,6 +112,7 @@ class Server:
                         bets.append(Bet(agency=agency, first_name=name, last_name=surname, document=document, birthdate=birthdate, number=int(number)))
                     # Guardo las apuestas
                     utils.store_bets(bets)
+                    self.clients_ids[bets[0].agency] = client_sock
                     logging.info(f'action: apuesta_recibida | result: success | cantidad: {len(bets)}')
                     # Le confirmo al cliente que se guardaron las apuestas
                     socket_wrapper.write_msg(client_sock, "OK")
@@ -91,7 +120,7 @@ class Server:
                     logging.error(f'action: apuesta_recibida | result: fail | cantidad: {len(bets)}')
             elif action == "FINISH":
                 logging.info(f'action: finalizar_conexion | result: success | ip: {addr[0]}')
-                self.clients[client_sock] = "FINISHED"
+                self.clients[client_sock] = "WAITING"
                 return False
                 
         except OSError as e:
